#+TITLE: Literate Emacs Config
#+AUTHOR: Jacob Brady
#+PROPERTY: header-args:emacs-lisp :tangle yes :cache yes :results silent :padline no

* General setup
Set up user name and email
#+begin_src elisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!

;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "Jacob Brady"
      user-mail-address "jacob.brady@protonmail.com")
#+end_src

** Theme
#+begin_src elisp
;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;; (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
;;       doom-variable-pitch-font (font-spec :family "sans" :size 13))

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'doom-one)
#+end_src
** Start emacs in full screen mode
#+begin_src elisp

(use-package frame
  :ensure t
  :config
  (add-to-list 'default-frame-alist '(fullscreen . maximized)))

#+end_src
** Projects
Set up project directories
#+begin_src elisp
(projectile-add-known-project "~/org")
;; (projectile-add-known-project "~/org-roam")
(projectile-add-known-project "~/Documents")
#+end_src
** PDFs
Use pdf-tools!
** TODO Shell
Figure out how to change shells. Would like to be able to run csh and bash interchangeably
** Misc

#+begin_src elisp
;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)
#+end_src

Startup org-mode with inline images:
#+begin_src elisp
(setq org-startup-with-inline-images t)
#+end_src

* Org-mode

Basic org-mode set-up
#+begin_src elisp
;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/org/")
#+end_src

** Notes
#+begin_src elisp
(after! org
  (setq org-default-notes-file (expand-file-name "notes.org" org-directory)))
#+end_src
** TODO Refiling
Understand refiling

** Agenda

#+begin_src elisp
;; Include entries from the emacs diary
(setq org-agenda-include-diary t)
#+end_src

All files in the org directory can contribute to the org-agenda
#+begin_src elisp
(setq org-agenda-files (list org-directory))
                        ;"~/org/holidays.org"
                        ;"~/org/todo.org"))
;(setq
 ; org-deadline-warning-days 7
 ; org-agenda-breadcrumbs-separator " ❱ ")
#+end_src

The following will append into archive file where %s is the file name from which archive is being created.
#+begin_src elisp
(setq org-archive-location "~/org/archive/%s_archive::")
#+end_src

[[https:www.rousette.org.uk/archives/doom-emacs-tweaks-org-journal-and-org-super-agenda/][Interesting blog post about org-super-agenda]]
** Capture templates

Using doct for declarative org-capture-templates

#+begin_src elisp

(setq org-capture-templates
    (doct '(("Todo" :keys "t"
                :file "~/org/todo.org"
                :prepend t
                :template ("* %{todo-state} %^{Description}"
                            ":PROPERTIES:"
                            ":Created: %U"
                            ":END:"
                            "%?")
                :children (("Project 1"  :keys "1"
                            :headline   "Project 1"
                            :todo-state "TODO"
                            :hook (lambda () (message "\"Project 1\" selected.")))
                            ("Project 2" :keys "2"
                            :headline   "Project 2"
                            :todo-state "TODO")
                            ("Project 3"  :keys "3"
                            :headline   "Project 3"
                            :todo-state "TODO"))))))

#+end_src


** Beautifying org-mode
*** TODO understand this code!
#+begin_src elisp

;(font-lock-add-keywords 'org-mode
;                        '(("^ *\\([-]\\) "
;                           (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
;
;(let* ((variable-tuple
;        (cond ((x-list-fonts "ETBembo")         '(:font "ETBembo"))
;              ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
;              ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
;              ((x-list-fonts "Verdana")         '(:font "Verdana"))
;              ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
;              (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
;       (headline           `(:inherit default :weight bold)))
;
;  (custom-theme-set-faces
;   'user
;   `(org-level-8 ((t (,@headline ,@variable-tuple))))
;   `(org-level-7 ((t (,@headline ,@variable-tuple))))
;   `(org-level-6 ((t (,@headline ,@variable-tuple))))
;   `(org-level-5 ((t (,@headline ,@variable-tuple :height 1.1))))
;   `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.2))))
;   `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.3))))
;   `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.4))))
;   `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.5))))
;   `(org-document-title ((t (,@headline ,@variable-tuple :height 2.0 :underline nil))))))
;
;
;(custom-theme-set-faces
; 'user
; '(variable-pitch ((t (:family "ETBembo" :height 160))))
; '(fixed-pitch ((t ( :family "Fira Code" :height 160)))))
;
;(add-hook 'org-mode-hook 'variable-pitch-mode)
;(add-hook 'org-mode-hook 'visual-line-mode)
;
;(custom-theme-set-faces
; 'user
; '(org-block ((t (:inherit fixed-pitch))))
; '(org-code ((t (:inherit (shadow fixed-pitch)))))
; '(org-document-info ((t (:foreground "dark orange"))))
; '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
; '(org-indent ((t (:inherit (org-hide fixed-pitch)))))
; '(org-link ((t (:foreground "royal blue" :underline t))))
; '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
; '(org-property-value ((t (:inherit fixed-pitch))) t)
; '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
; '(org-table ((t (:inherit fixed-pitch :foreground "#83a598"))))
; '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
; '(org-verbatim ((t (:inherit (shadow fixed-pitch))))))
#+end_src

** Org-roam
Setting org-roam directory
#+begin_src elisp

(setq org-roam-directory "~/org/org-roam")
(add-hook 'after-init-hook 'org-roam-mode)

#+end_src

*** Dailies

#+begin_src elisp

(setq org-roam-dailies-directory "daily/")
(setq org-roam-dailies-capture-templates
      '(("l" "lab" entry
         #'org-roam-capture--get-point
         "* %?"
         :file-name "daily/%<%Y-%m-%d>-${name}"
         :head "#+title: %<%Y-%m-%d>\n"
         :olp ("Lab notes"))

        ("p" "project-1" entry
         #'org-roam-capture--get-point
         "* %?"
         :file-name "daily/%<%Y-%m-%d>-project-1"
         :head "#+title: %<%Y-%m-%d> - project-code-1\n#+roam_tags: project-code-1"
         :olp ("Lab notes for project-1"))

        ("j" "journal" entry
         #'org-roam-capture--get-point
         "* %?"
         :file-name "daily/%<%Y-%m-%d>"
         :head "#+title: %<%Y-%m-%d>\n"
         :olp ("Journal"))))
#+end_src
** Exporting
Found this nice code snippet for creating individual export directories depending on file extension type ([[https:rwx.io/posts/org-export-configurations/][link]]).
#+begin_src elisp

    (defvar org-export-output-directory-prefix "export_" "prefix of directory used for org-mode export")

    (defadvice org-export-output-file-name (before org-add-export-dir activate)
      "Modifies org-export to place exported files in a different directory"
      (when (not pub-dir)
          (setq pub-dir (concat org-export-output-directory-prefix (substring extension 1)))
          (when (not (file-directory-p pub-dir))
           (make-directory pub-dir))))


#+end_src
** Python

The following allows org babel to use a particular python environment. In this case I'm using anaconda python.

#+begin_src elisp
(setq org-babel-python-command "/home/j-brady/anaconda3/bin/python")
#+end_src



;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.


** RSS feeds

RSS feeds are updated using C-c C-x g and updated along with opening up the feed.org file with C-c C-x G

#+begin_src elisp

(setq org-feed-alist '(("InThePipeLine" "https://blogs.sciencemag.org/pipeline/feed"
"~/org/feeds.org" "In The Pipeline - Derek Lowe")

("eLife - Cancer Biology" "https://elifesciences.org/rss/subject/cancer-biology.xml"
"~/org/feeds.org" "eLife - Cancer Biology")

("Fierce Pharma" "https://www.fiercepharma.com/rss/xml" "~/org/feeds.org" "Fierce Pharma")
; ("The Motley Fool" "https://www.fool.com/feeds/index.aspx?id=foolwatch&format=rss2"
; "~/org/feeds.org" "The Motley Fool")

("Practical Fragments" "http://practicalfragments.blogspot.com/feeds/posts/default"
"~/org/feeds.org" "Practical Fragments")))

#+end_src

*** TODO Limit number of entries (i.e. delete older entries automatically)
* Magit
** Default directory setup
#+begin_src elisp
(setq magit-repository-directories '(("~/src" . 3) ("~/.emacs.d") ("~/.doom")))
#+end_src
** TODO Automatically signing commits
Understand this code!
#+begin_src elisp
;(after! magit
;  (setq magit-commit-arguments '("--gpg-sign=B511A07485FD1360")
;        magit-rebase-arguments '("--autostash" "--gpg-sign=B511A07485FD1360")
;        magit-pull-arguments   '("--rebase" "--autostash" "--gpg-sign=B511A07485FD1360"))
;  (magit-define-popup-option 'magit-rebase-popup
;    ?S "Sign using gpg" "--gpg-sign=" #'magit-read-gpg-secret-key))
#+end_src
** Magit hub
#+begin_src elisp
(setq +magit-hub-features t)
#+end_src
** Preferred git url method
#+begin_src elisp
(after! magithub (setq magithub-preferred-remote-method 'git_url))
#+end_src
** Default directory for cloning new repositories
#+begin_src elisp
(after! magithub (setq magithub-clone-default-directory "~/src/github.com"))
#+end_src
